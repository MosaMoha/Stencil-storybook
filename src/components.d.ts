/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface UiButton {
    }
    interface UiSidenav {
        "open": () => Promise<void>;
        "opened": boolean;
        "title": string;
    }
    interface UiTooltip {
        "opened": boolean;
    }
}
export interface UiSidenavCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLUiSidenavElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiSidenavElementEventMap {
        "sidenavOpened": string;
    }
    interface HTMLUiSidenavElement extends Components.UiSidenav, HTMLStencilElement {
        addEventListener<K extends keyof HTMLUiSidenavElementEventMap>(type: K, listener: (this: HTMLUiSidenavElement, ev: UiSidenavCustomEvent<HTMLUiSidenavElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLUiSidenavElementEventMap>(type: K, listener: (this: HTMLUiSidenavElement, ev: UiSidenavCustomEvent<HTMLUiSidenavElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLUiSidenavElement: {
        prototype: HTMLUiSidenavElement;
        new (): HTMLUiSidenavElement;
    };
    interface HTMLUiTooltipElement extends Components.UiTooltip, HTMLStencilElement {
    }
    var HTMLUiTooltipElement: {
        prototype: HTMLUiTooltipElement;
        new (): HTMLUiTooltipElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "ui-button": HTMLUiButtonElement;
        "ui-sidenav": HTMLUiSidenavElement;
        "ui-tooltip": HTMLUiTooltipElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface UiButton {
    }
    interface UiSidenav {
        "onSidenavOpened"?: (event: UiSidenavCustomEvent<string>) => void;
        "opened"?: boolean;
        "title"?: string;
    }
    interface UiTooltip {
        "opened"?: boolean;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "ui-button": UiButton;
        "ui-sidenav": UiSidenav;
        "ui-tooltip": UiTooltip;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            "ui-sidenav": LocalJSX.UiSidenav & JSXBase.HTMLAttributes<HTMLUiSidenavElement>;
            "ui-tooltip": LocalJSX.UiTooltip & JSXBase.HTMLAttributes<HTMLUiTooltipElement>;
        }
    }
}
